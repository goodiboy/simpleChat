{"version":3,"sources":["assets/res/script/HttpUtils.ts"],"names":[],"mappings":";;;;;;AAAA,IAAM,EAAE,GAA0B,MAAc,CAAC,EAAE,IAAI,EAAE,CAAC;AAE1D;IAAA;QAEW,QAAG,GAA0B,IAAI,CAAC;QAClC,iBAAY,GAAW,CAAC,CAAC;QACzB,cAAS,GAAY,KAAK,CAAC;IAwDtC,CAAC;IAtDU,wBAAI,GAAX;QAAA,iBAYC;QAXG,IAAM,IAAI,GAAG;YACT,cAAc,EAAE,KAAK;YACrB,sBAAsB,EAAE,IAAI;YAC5B,YAAY,EAAE,CAAC,WAAW,EAAE,SAAS,CAAC;SACzC,CAAA;QACD,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,uBAAuB,EAAE,IAAI,CAAC,CAAC;QACrD,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,SAAS,EAAE,UAAA,IAAI;YACvB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACpB,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,KAAI,CAAC,aAAa,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,OAAO;IACA,iCAAa,GAApB;QAAA,iBAuBC;QAtBG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC/B,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,UAAU,EAAE,UAAA,IAAI;YACxB,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,KAAK;QACL,WAAW,CAAC;YACR,IAAI,KAAI,CAAC,GAAG,IAAI,KAAI,CAAC,SAAS,EAAE;gBAC5B,KAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;gBACzB,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;aAC3B;QACL,CAAC,EAAE,IAAI,CAAC,CAAC;QAET,WAAW;QACX,WAAW,CAAC;YACR,IAAI,KAAI,CAAC,GAAG,IAAI,KAAI,CAAC,SAAS,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,KAAI,CAAC,YAAY,GAAG,KAAK,EAAE;gBACtE,KAAI,CAAC,SAAS,GAAG,KAAK,CAAC;gBACvB,KAAI,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;gBACtB,KAAI,CAAC,GAAG,GAAG,IAAI,CAAC;aACnB;QACL,CAAC,EAAE,GAAG,CAAC,CAAC;IAEZ,CAAC;IAED,OAAO;IACA,sBAAE,GAAT,UAAU,KAAa,EAAE,QAAkB;QACvC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACjC,CAAC;IAED,OAAO;IACA,wBAAI,GAAX,UAAY,KAAa,EAAE,IAAU;QACjC,IAAI,IAAI,EAAE;YACN,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;SAC9B;aAAM;YACH,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACxB;IAEL,CAAC;IA1DsB,kBAAQ,GAAc,IAAI,SAAS,EAAE,CAAC;IA2DjE,gBAAC;CA5DD,AA4DC,IAAA;kBA5DoB,SAAS","file":"","sourceRoot":"/","sourcesContent":["const io: SocketIOClientStatic = (window as any).io || {};\n\nexport default class HttpUtils {\n    public static readonly instance: HttpUtils = new HttpUtils();\n    public sio: SocketIOClient.Socket = null;\n    public lastPingTime: number = 0;\n    public connected: boolean = false;\n\n    public init(): void {\n        const opts = {\n            'reconnection': false, // 自动重连\n            'force new connection': true, //建立新的连接\n            'transports': ['websocket', 'polling']\n        }\n        this.sio = io.connect('http://127.0.0.1:8888', opts);\n        this.sio.on('connect', data => {\n            console.log('连接成功');\n            this.connected = true;\n            this.startHearBeat();\n        });\n    }\n\n    // 心跳检测\n    public startHearBeat(): void {\n        this.lastPingTime = Date.now();\n        this.sio.on('gamePong', data => {\n            this.lastPingTime = Date.now();\n        });\n\n        // 心跳\n        setInterval(() => {\n            if (this.sio && this.connected) {\n                this.sio.emit('gamePing')\n                console.log('gamePong');\n            }\n        }, 2000);\n\n        // 检测是否断开连接\n        setInterval(() => {\n            if (this.sio && this.connected && Date.now() - this.lastPingTime > 10000) {\n                this.connected = false;\n                this.sio.disconnect();\n                this.sio = null;\n            }\n        }, 500);\n\n    }\n\n    // 监听事件\n    public on(event: string, callback: Function): void {\n        this.sio.on(event, callback);\n    }\n\n    // 发射事件\n    public emit(event: string, data?: any): void {\n        if (data) {\n            this.sio.emit(event, data);\n        } else {\n            this.sio.emit(event);\n        }\n\n    }\n}"]}